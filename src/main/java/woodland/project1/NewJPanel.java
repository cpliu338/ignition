package woodland.project1;

import com.thoughtworks.xstream.XStream;
import ignition.tagdb.model.*;
import java.util.*;
import javax.swing.*;
import java.io.*;
import com.opencsv.*;

/**
 * http://blog.bdoughan.com/2010/10/how-does-jaxb-compare-to-xstream.html node order
 * https://www.baeldung.com/xstream-serialize-object-to-xml
 * 
 * @author cp_liu
 */
public class NewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    public NewJPanel() {
        initComponents();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jTabbedPane1.setTitleAt(0, "Current Tag");
        this.jTabbedPane1.addTab("XML", jTextArea2);
        allTags = new Tags();
        allTags.setLocale("en_HK");
        breadcrumbs = new ArrayList<>();
        updateBreadcrumb();
        xstream = new XStream();
        xstream.processAnnotations(new Class[]{
            Property.class, Tag.class, Parameters.class, Tags.class});
    }
    
  public static void main(String[] args) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run() {
        NewJPanel panel = new NewJPanel();
        JFrame frame = new JFrame("Main Frame");
        frame.add(panel);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
      }
    });
  }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        jButton1.setLabel("Add Child");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTabbedPane1.addTab("tab1", jScrollPane1);

        jButton3.setText("Move to 1st child");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(82, 82, 82)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                        .addGap(78, 78, 78)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton3))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    XStream xstream;
    
    private void serialize() {
        File f = new File(this.jTextField1.getText());
        
        try (CSVReader csv = new CSVReader(new InputStreamReader(
                new FileInputStream(f)
        ))) {
            Iterator<String[]> it = csv.iterator();
            String mode="";
            String pcu = "";
            Tag t;
            allTags = new Tags();
            allTags.setLocale("en_HK");
            while (it.hasNext()) {
                String[] row = it.next();
                if (row.length<6)// || row[0]==null)
                    continue;
                if (row[0].trim().length()!=0) {
                    // title row
                    mode = row[0].trim();
                    switch (mode) {
                        case "PCU": 
                            break;
                        case "Status Tags":
                            t = new Tag();
                            t.setName(mode);
                            t.setPath(pcu);
                            t.setType("Folder");
                            allTags.addTag(t);
                            break;
                    }
                }
                else {
                    // content row
                    switch (mode) {
                        case "PCU": 
                            pcu = row[1].trim();
                            t = new Tag();
                            t.setName(pcu);
                            t.setPath("");
                            t.setType("Folder");
                            allTags.addTag(t);
                            break;
                        case "Status Tags":
/*
<Property name="Value">true</Property>
<Property name="DataType">6</Property>
<Property name="OPCServer">Ignition OPC-UA Server</Property>
<Property name="OPCItemPath">
ns=1;s=[TaiWoTsuenSWPS]SingleBitBinaryInput:0:g1v2i0
</Property>
*/                            
                            t = new Tag();
                            t.setName(row[1].trim());
                            t.setPath(String.format("%s/%s", pcu, mode));
                            t.setType("OPC");
                            Property value = new Property();
                            value.setName("Value");
                            value.setValue(Boolean.FALSE.toString());
                            t.addChild(value);
                            Property dataType = new Property();
                            dataType.setName("DataType");
                            dataType.setValue("6");
                            t.addChild(dataType);
                            Property opcServer = new Property();
                            opcServer.setName("OPCServer");
                            opcServer.setValue("Ignition OPC-UA Server");
                            t.addChild(opcServer);
                            Property itemPath = new Property();
                            itemPath.setName("OPCItemPath");
                            int offset = Integer.parseInt(row[6].trim());
                            itemPath.setValue(String.format(
                                    "ns=1;s=[%s]SingleBitBinaryInput:%d:g1v2i%d",
                                    pcu, offset, offset
                                    ));
                            t.addChild(itemPath);
                            allTags.addTag(t);
                            break;
                    }
                }
            }
            jTextArea1.setText(
            xstream.toXML(allTags));
        }
        catch (IOException ex) {
            this.jTextArea1.setText(ex.getMessage());
            throw new RuntimeException(ex);
        }
    }
    
    public void deserialize() {
        Tags tags = (Tags)xstream.fromXML(jTextArea1.getText());
        TagI t = tags.getTags().get(0);
        if (t==null)
            jTextField1.setText("Null Tag");
        else {
            List children = t.getChildren();
            jTextField1.setText(
            t.getPath()==null ? "No path" : (t.getPath().trim().length()==0?
                    "Empty path":t.getPath())
            );
        }
    }
    
    private void displayCurrentTag() {
        if (currentTag == null) {
            jTextArea1.setText("At root");
            return;
        }
        StringBuilder buffer = new StringBuilder(currentTag.getClass().getSimpleName());
        for (TagI t : currentTag.getChildren()) {
            buffer.append("\n\t" + t.getClass().getSimpleName());
        }
        jTextArea1.setText(buffer.toString());
    }
    
    private void updateBreadcrumb() {
        StringBuilder buffer = new StringBuilder("root");
        currentTag = null;
        for (Integer in : breadcrumbs) {
            if (currentTag == null) // @ root
                currentTag = allTags.getTags().get(in);
            else
                currentTag = currentTag.getChildren().get(in);
        }
        for (Integer in : breadcrumbs) 
            buffer.append(" : ").append(in.toString());
        jTextField1.setText(buffer.toString());
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // add child
        // move to the current tag first
        updateBreadcrumb();
        // then add child
        TagI t;
        if (breadcrumbs.size()==0) {
            t = new Tag();
            Integer level = allTags.getTags().size();
            t.setName("Level "+level);
            t.setPath(String.format("%s/%s", "pcu", level.toString()));
            t.setType("OPC");  
        }
        else {
            t = new Property();
            t.setName("PropName");
            t.setValue("Prop value");
        }
        if (currentTag == null)
            allTags.addTag(t);
        else
            currentTag.addChild(t);
        jTextArea2.setText(
            xstream.toXML(allTags));
        displayCurrentTag();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Move to first child
        if (currentTag == null) {
            // @ root
            if (!allTags.getTags().isEmpty()) {
                //currentTag = 
                breadcrumbs.add(0);
            }
        }
        else {
            if (!currentTag.getChildren().isEmpty())
                breadcrumbs.add(0);
        }
        updateBreadcrumb();
        displayCurrentTag();
        
    }//GEN-LAST:event_jButton3ActionPerformed
    
private javax.swing.JScrollPane jScrollPane2;
private javax.swing.JTextArea jTextArea2;
private Tags allTags;
private TagI currentTag;
private List<Integer> breadcrumbs;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
